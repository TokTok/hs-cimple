load("@rules_haskell//haskell:defs.bzl", "haskell_library")
load("//third_party/haskell/alex:build_defs.bzl", "alex_lexer")
load("//third_party/haskell/happy:build_defs.bzl", "happy_parser")
load("//third_party/haskell/hspec-discover:build_defs.bzl", "hspec_test")
load("//tools/project:build_defs.bzl", "project")

project(
    custom_cirrus = True,
    license = "gpl3-https",
)

alex_lexer(
    name = "Lexer",
    src = "src/Language/Cimple/Lexer.x",
)

haskell_library(
    name = "lexer",
    srcs = [
        "src/Language/Cimple/Lexer.hs",
        "src/Language/Cimple/ParseResult.hs",
        "src/Language/Cimple/Tokens.hs",
    ],
    src_strip_prefix = "src",
    tags = [
        "haskell",
        "no-cross",
    ],
    visibility = [
        "//hs-cimple:__subpackages__",
        "//tools/haskell:__pkg__",
    ],
    deps = [
        "//third_party/haskell:aeson",
        "//third_party/haskell:array",
        "//third_party/haskell:base",
        "//third_party/haskell:bytestring",
        "//third_party/haskell:text",
    ],
)

haskell_library(
    name = "ast",
    srcs = ["src/Language/Cimple/Ast.hs"],
    src_strip_prefix = "src",
    tags = [
        "haskell",
        "no-cross",
    ],
    visibility = [
        "//hs-cimple:__subpackages__",
        "//tools/haskell:__pkg__",
    ],
    deps = [
        "//third_party/haskell:aeson",
        "//third_party/haskell:base",
        "//third_party/haskell:data-fix",
        "//third_party/haskell:transformers-compat",
    ],
)

haskell_library(
    name = "describe-ast",
    srcs = [
        "src/Language/Cimple/DescribeAst.hs",
        "src/Language/Cimple/Flatten.hs",
    ],
    src_strip_prefix = "src",
    tags = [
        "haskell",
        "no-cross",
    ],
    visibility = [
        "//hs-cimple:__subpackages__",
        "//tools/haskell:__pkg__",
    ],
    deps = [
        ":ast",
        ":lexer",
        "//third_party/haskell:base",
        "//third_party/haskell:data-fix",
        "//third_party/haskell:text",
    ],
)

happy_parser(
    name = "Parser",
    src = "src/Language/Cimple/Parser.y",
    preproc = "expand_yacc.pl",
    preproc_tool = "@perl",
)

haskell_library(
    name = "parser",
    srcs = [":Parser"],
    extra_srcs = ["src/Language/Cimple/Parser.preproc.y"],
    ghcopts = ["-DSOURCE=\"$(location src/Language/Cimple/Parser.preproc.y)\""],
    src_strip_prefix = "src",
    tags = [
        "haskell",
        "no-cross",
    ],
    visibility = [
        "//hs-cimple:__subpackages__",
        "//tools/haskell:__pkg__",
    ],
    deps = [
        ":ast",
        ":describe-ast",
        ":lexer",
        "//third_party/haskell:aeson",
        "//third_party/haskell:array",
        "//third_party/haskell:base",
        "//third_party/haskell:bytestring",
        "//third_party/haskell:data-fix",
        "//third_party/haskell:file-embed",
        "//third_party/haskell:text",
        "//third_party/haskell:transformers-compat",
    ],
)

happy_parser(
    name = "CommentParser",
    src = "src/Language/Cimple/CommentParser.y",
    preproc = "expand_yacc.pl",
    preproc_tool = "@perl",
)

haskell_library(
    name = "comment-parser",
    srcs = [":CommentParser"],
    src_strip_prefix = "src",
    tags = [
        "haskell",
        "no-cross",
    ],
    visibility = [
        "//hs-cimple:__subpackages__",
        "//tools/haskell:__pkg__",
    ],
    deps = [
        ":ast",
        ":describe-ast",
        ":lexer",
        "//third_party/haskell:array",
        "//third_party/haskell:base",
        "//third_party/haskell:data-fix",
        "//third_party/haskell:text",
    ],
)

happy_parser(
    name = "TreeParser",
    src = "src/Language/Cimple/TreeParser.y",
    preproc = "expand_yacc.pl",
    preproc_tool = "@perl",
)

haskell_library(
    name = "tree-parser",
    srcs = [":TreeParser"],
    src_strip_prefix = "src",
    tags = [
        "haskell",
        "no-cross",
    ],
    visibility = [
        "//hs-cimple:__subpackages__",
        "//tools/haskell:__pkg__",
    ],
    deps = [
        ":ast",
        ":comment-parser",
        ":describe-ast",
        ":lexer",
        "//third_party/haskell:array",
        "//third_party/haskell:base",
        "//third_party/haskell:data-fix",
        "//third_party/haskell:text",
    ],
)

haskell_library(
    name = "hs-cimple",
    srcs = glob(
        ["src/**/*.*hs"],
        exclude = [
            "src/Language/Cimple/Ast.hs",
            "src/Language/Cimple/DescribeAst.hs",
            "src/Language/Cimple/Flatten.hs",
            "src/Language/Cimple/ParseResult.hs",
            "src/Language/Cimple/Tokens.hs",
        ],
    ),
    src_strip_prefix = "src",
    tags = [
        "haskell",
        "no-cross",
    ],
    version = "0.0.23",
    visibility = ["//visibility:public"],
    deps = [
        ":ast",
        ":describe-ast",
        ":lexer",
        ":parser",
        ":tree-parser",
        "//third_party/haskell:aeson",
        "//third_party/haskell:array",
        "//third_party/haskell:base",
        "//third_party/haskell:bytestring",
        "//third_party/haskell:containers",
        "//third_party/haskell:data-fix",
        "//third_party/haskell:filepath",
        "//third_party/haskell:monad-parallel",
        "//third_party/haskell:mtl",
        "//third_party/haskell:prettyprinter",
        "//third_party/haskell:prettyprinter-ansi-terminal",
        "//third_party/haskell:split",
        "//third_party/haskell:text",
        "//third_party/haskell:transformers-compat",
    ],
)

hspec_test(
    name = "testsuite",
    size = "small",
    deps = [
        ":hs-cimple",
        "//third_party/haskell:QuickCheck",
        "//third_party/haskell:base",
        "//third_party/haskell:data-fix",
        "//third_party/haskell:extra",
        "//third_party/haskell:hspec",
        "//third_party/haskell:prettyprinter",
        "//third_party/haskell:prettyprinter-ansi-terminal",
        "//third_party/haskell:text",
        "//third_party/haskell:transformers-compat",
    ],
)
